buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        mavenCentral()
        maven {
            url = "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.1.0'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.56'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

ext.configFile = file "build.txt"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mod_version}"
group = "org.zeith.${config.mod_id}"
archivesBaseName = "${config.mod_id_fancy}-${config.minecraft_version}"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "run"
    mappings = "${config.mcp}"
    makeObfSourceJar = false
	replace 'required-after:hammercore', "required-after:hammercore@[${config.hl_version},)"
    replace '@VERSION@', "${config.mod_version}"
	replace '@FINGERPRINT@', project.findProperty('signSHA1')

    def args = [
            '-Dfml.coreMods.load=org.zeith.viveapi.asm.ViveAPICoremod',
            '-Dmixin.hotSwap=true',
            '-Dmixin.checks.interfaces=true',
            '-Dmixin.debug.countInjections=true',
            '-Dmixin.debug.verbose=true'
    ]
    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    maven {
        name = "DragonForge"
        url = "https://raw.github.com/dragon-forge/maven/master"
    }
    maven {
        name = "jei"
        url =  "http://dvs1.progwml6.com/files/maven"
    }
    maven { setUrl("https://oss.sonatype.org/content/repositories/public/") }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven/"
    }
}

dependencies {
	deobfCompile "tk.zeitheron.HammerLib:HammerLib-${config.minecraft_version}:${config.hl_version}:deobf"
	
	deobfCompile 'org.spongepowered:mixin:0.8.1-SNAPSHOT'
	embed('org.spongepowered:mixin:0.8.1-SNAPSHOT') {
        transitive = false
    }
	
    deobfCompile "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}:api"
    runtime "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}"
}

mixin {
    add sourceSets.main, "mixins.viveapi.refmap.json"
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", config.minecraft_version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		include 'pack.mcmeta'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'pack.mcmeta'
    }
	rename "mod_id_at.cfg", "META-INF/${config.mod_id}_at.cfg"
}

task deobfJar(type: Jar) {
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    }

    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'MixinConfigs': 'mixins.viveapi.json'
        attributes 'ForceLoadAsMod': true
        attributes 'FMLCorePlugin': 'org.zeith.viveapi.asm.ViveAPICoremod'
        attributes 'FMLCorePluginContainsFMLMod': 'false'
        attributes 'FMLAT': "${config.mod_id}_at.cfg"
    }
}

jar {
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    }

    manifest {
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'MixinConfigs': 'mixins.viveapi.json'
        attributes 'ForceLoadAsMod': true
        attributes 'FMLCorePlugin': 'org.zeith.viveapi.asm.ViveAPICoremod'
        attributes 'FMLCorePluginContainsFMLMod': 'false'
        attributes 'FMLAT': "${config.mod_id}_at.cfg"
    }
}

artifacts {
    archives deobfJar
}

curseforge {
	apiKey = System.env.CURSEFORGE_API_KEY != null ? System.env.CURSEFORGE_API_KEY : '0'
	project {
		id = "${config.cf_project}"
		changelogType = 'html'
		changelog = file('changelog.html')
		releaseType = "${config.release_type}"
		addGameVersion "${config.minecraft_version}"
		mainArtifact(jar) {
		  displayName = "[${config.minecraft_version}] ${config.mod_name} - ${config.mod_version}"
		}
		relations {
            requiredLibrary 'Hammer-Lib'
        }
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        System.env.MC_KS_PASS != null
    }
    keyStore = System.env.MC_KS_PATH
    alias = System.env.MC_KS_ALIAS
    storePass = System.env.MC_KS_PASS
    keyPass = System.env.MC_KS_PASS
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

task signDeobfJar(type: SignJar, dependsOn: deobfJar) {
    onlyIf {
        System.env.MC_KS_PASS != null
    }
    keyStore = System.env.MC_KS_PATH
    alias = System.env.MC_KS_ALIAS
    storePass = System.env.MC_KS_PASS
    keyPass = System.env.MC_KS_PASS
    inputFile = deobfJar.archivePath
    outputFile = deobfJar.archivePath
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File("changelog.html")
    untaggedName = "Version ${project.version}"
    fromCommit = "${config.start_git_commit}"
    toRef =  "HEAD"
    gitHubIssuePattern = "nonada123";
    templateContent = """
{{#tags}}
<h3><a href="https://github.com/dragon-forge/maven">To get developer builds, consult our maven repository</a></h3>
<h1>Changes:</h1>
  <ul>
    {{#commits}}
    <li> {{{message}}}</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}

build.dependsOn signJar
build.dependsOn signDeobfJar
tasks.build.dependsOn makeChangelog

afterEvaluate {
	tasks["curseforge${config.cf_project}"].dependsOn.add(signJar)
	tasks["curseforge${config.cf_project}"].dependsOn.add(signDeobfJar)
	tasks["curseforge${config.cf_project}"].dependsOn.add(makeChangelog)
}